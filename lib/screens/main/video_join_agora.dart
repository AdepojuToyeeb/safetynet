import 'package:flutter/material.dart';
import 'package:agora_rtc_engine/agora_rtc_engine.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:safetynet/utils/snack_message.dart';

typedef ExecuteCallback = void Function();
typedef ExecuteFutureCallback = Future<void> Function();

const appId = "";
// Fill in the temporary token generated from Agora Console
const token =
    "";
// Fill in the channel name you used to generate the token
const channel = "";

class JoinAgoraRoomWidget extends StatefulWidget {
  final String userId;
  const JoinAgoraRoomWidget({required this.userId, super.key});

  @override
  State<JoinAgoraRoomWidget> createState() => _RoomWidgetState();
}

class _RoomWidgetState extends State<JoinAgoraRoomWidget> {
  int? _remoteUid; // The UID of the remote user
  late RtcEngine _engine; // The RtcEngine instances
  bool _initStatusLoading = true;
  bool _hasLeftChannel = false; // Add this flag to prevent multiple exits

  @override
  void initState() {
    super.initState();

    initAgora();
  }

  Future<void> initAgora() async {
    // Get microphone and camera permissions
    await [Permission.microphone, Permission.camera].request();
    // Create RtcEngine instance
    _engine = await createAgoraRtcEngine();

    // Initialize RtcEngine and set the channel profile to live broadcasting
    await _engine.initialize(const RtcEngineContext(
      appId: appId,
      channelProfile: ChannelProfileType.channelProfileCommunication,
    ));

    // Add an event handler
    _engine.registerEventHandler(
      RtcEngineEventHandler(
        // Occurs when the local user joins the channel successfully
        onJoinChannelSuccess: (RtcConnection connection, int elapsed) {
          setState(() {
            _initStatusLoading = false;
          });
        },
        // Occurs when a remote user join the channel
        onUserJoined: (RtcConnection connection, int remoteUid, int elapsed) {
          setState(() {
            _remoteUid = remoteUid;
          });
        },
        // Occurs when a remote user leaves the channel
        onUserOffline: (RtcConnection connection, int remoteUid,
            UserOfflineReasonType reason) {
          setState(() {
            _remoteUid = null;
          });
          _handleHostLeft();
        },
      ),
    );
    // Enable the video module
    await _engine.enableVideo();

    // Enable local video preview
    await _engine.startPreview();
    setState(() {
      _initStatusLoading = false;
    });
    // Join a channel using a temporary token and channel name
    await _engine.joinChannel(
      token: token,
      channelId: channel,
      options: const ChannelMediaOptions(
          // Automatically subscribe to all video streams
          autoSubscribeVideo: true,
          // Automatically subscribe to all audio streams
          autoSubscribeAudio: true,
          // Publish camera video
          publishCameraTrack: true,
          // Publish microphone audio
          publishMicrophoneTrack: false,
          // Set user role to clientRoleBroadcaster (broadcaster) or clientRoleAudience (audience)
          clientRoleType: ClientRoleType.clientRoleBroadcaster,
          audienceLatencyLevel:
              AudienceLatencyLevelType.audienceLatencyLevelLowLatency),
      uid:
          0, // When you set uid to 0, a user name is randomly generated by the engine
    );
  }

  void _handleHostLeft() {
    if (!_hasLeftChannel && mounted) {
      setState(() {
        _hasLeftChannel = true;
      });

      // Show a message and exit
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Stream ended by host'),
          duration: Duration(seconds: 2),
        ),
      );

      // Clean up and exit after a short delay
      Future.delayed(const Duration(seconds: 2), () {
        _dispose().then((_) {
          if (mounted) {
            Navigator.of(context).pop();
          }
        });
      });
    }
  }

  Future<void> _onEndCall() async {
    try {
      // Leave the channel and clean up
      await _engine.leaveChannel();
      await _engine.release();
      // Pop the current route if the context is still mounted
      if (mounted) {
        Navigator.of(context).pop();
      }
    } catch (e) {
      if (mounted) {
        SnackMsg.showError(context, 'Error ending call: $e');
      }
    }
  }

  @override
  void dispose() {
    super.dispose();
    _dispose();
  }

  Future<void> _dispose() async {
    // Leave the channel
    await _engine.leaveChannel();
    // Release resources
    await _engine.release();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        automaticallyImplyLeading: false,
        title: const Text('Live Broadcast'),
      ),
      body: _initStatusLoading
          ? const Center(child: CircularProgressIndicator())
          : Stack(
              children: [
                Center(child: _remoteVideo()),
                Positioned(
                  bottom: 20,
                  left: 0,
                  right: 0,
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      RawMaterialButton(
                        onPressed: _onEndCall,
                        shape: const CircleBorder(),
                        padding: const EdgeInsets.all(12),
                        fillColor: Colors.red,
                        child: const Icon(
                          Icons.call_end,
                          color: Colors.white,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
    );
  }

  // Widget to display remote video
  Widget _remoteVideo() {
    if (_remoteUid != null) {
      return AgoraVideoView(
        controller: VideoViewController.remote(
          rtcEngine: _engine,
          canvas: VideoCanvas(uid: _remoteUid),
          connection: const RtcConnection(channelId: channel),
        ),
      );
    } else {
      return const Text(
        'Waiting for host...',
        textAlign: TextAlign.center,
        style: TextStyle(
          color: Colors.white,
        ),
      );
    }
  }
}
